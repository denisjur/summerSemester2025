package annonymusclasses;

public class Main {

	public static void main(String[] args) {
		
		// ************************************************************************************
		// ðŸ”¹ Anonymous class = Eine Klasse ohne Namen. Kann nicht wiederverwendet werden.
		// âž¤ ErmÃ¶glicht individuelles Verhalten, ohne eine neue separate Klasse zu erstellen.
		// âž¤ Wird oft fÃ¼r einmalige Anwendungen genutzt: TimerTask, Runnable, Callbacks etc.
		// ************************************************************************************
		
		// ðŸ”¸ ÃŽn loc sÄƒ creÄƒm o clasÄƒ complet nouÄƒ pentru un cÃ¢ine vorbitor,
		//	  putem folosi o clasÄƒ anonimÄƒ (Anonymous Class).
		// ðŸ”¸ Statt eine neue eigene Klasse zu schreiben (z.â€¯B. TalkingDog),
		//	  erstellen wir direkt ein Dog-Objekt mit Ã¼berschriebenem Verhalten.

		// ðŸ”¹ Anonymous Classes beginnen mit {} nach dem new-Konstruktor:
		//	  -> Innerhalb dieser geschweiften Klammern kÃ¶nnen wir Methoden Ã¼berschreiben
		//	  oder individuelles Verhalten hinzufÃ¼gen, ohne eine benannte Klasse zu definieren.

		
		 // ðŸ”¹ Normale Instanz von Dog
        Dog dog1 = new Dog();

        // ðŸ”¹ Anonyme Klasse, die `speak()` Ã¼berschreibt
        Dog dog2 = new Dog() {
            @Override
            void speak() {
                System.out.println("Scooby Doo says *Ruh Roh*");
            }
        };

        // ðŸ§ª Methoden aufrufen
        dog1.speak(); // Ausgabe: The dog goes *woof*
        dog2.speak(); // Ausgabe: Scooby Doo says *Ruh Roh*
    
	}

}
